{
  "service": {
    "service": "veganInspector",
    "serviceObject": {
      "name": "veganInspector"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs16.x",
      "memorySize": 128,
      "timeout": 10,
      "stage": "dev",
      "region": "us-east-1",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "CreateUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/veganInspector-dev-createUser"
            }
          },
          "GetOneUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/veganInspector-dev-getOneUser"
            }
          },
          "GetAllUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/veganInspector-dev-getAllUser"
            }
          },
          "UpdateUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/veganInspector-dev-updateUser"
            }
          },
          "DeleteUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/veganInspector-dev-deleteUser"
            }
          },
          "CreateProductLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/veganInspector-dev-createProduct"
            }
          },
          "GetOneProductLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/veganInspector-dev-getOneProduct"
            }
          },
          "GetAllProductLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/veganInspector-dev-getAllProduct"
            }
          },
          "UpdateProductLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/veganInspector-dev-updateProduct"
            }
          },
          "DeleteProductLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/veganInspector-dev-deleteProduct"
            }
          },
          "CreateReportProductLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/veganInspector-dev-createReportProduct"
            }
          },
          "DeleteReportProductLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/veganInspector-dev-deleteReportProduct"
            }
          },
          "UpdateReportProductLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/veganInspector-dev-updateReportProduct"
            }
          },
          "CreateIngredientLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/veganInspector-dev-createIngredient"
            }
          },
          "GetOneIngredientLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/veganInspector-dev-getOneIngredient"
            }
          },
          "GetAllIngredientLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/veganInspector-dev-getAllIngredient"
            }
          },
          "UpdateIngredientLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/veganInspector-dev-updateIngredient"
            }
          },
          "DeleteIngredientLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/veganInspector-dev-deleteIngredient"
            }
          },
          "CreateCommentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/veganInspector-dev-createComment"
            }
          },
          "GetOneCommentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/veganInspector-dev-getOneComment"
            }
          },
          "GetAllCommentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/veganInspector-dev-getAllComment"
            }
          },
          "UpdateCommentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/veganInspector-dev-updateComment"
            }
          },
          "DeleteCommentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/veganInspector-dev-deleteComment"
            }
          },
          "IncreaseCommentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/veganInspector-dev-increaseComment"
            }
          },
          "DecreaseCommentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/veganInspector-dev-decreaseComment"
            }
          },
          "CreateReportCommentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/veganInspector-dev-createReportComment"
            }
          },
          "DeleteReportCommentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/veganInspector-dev-deleteReportComment"
            }
          },
          "UpdateReportCommentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/veganInspector-dev-updateReportComment"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "veganInspector",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/veganInspector-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/veganInspector-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "veganInspector",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "CreateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/veganInspector/dev/1665181927671-2022-10-07T22:32:07.671Z/veganInspector.zip"
              },
              "Handler": "handler.createUser",
              "Runtime": "nodejs16.x",
              "FunctionName": "veganInspector-dev-createUser",
              "MemorySize": 128,
              "Timeout": 10,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Environment": {
                "Variables": {
                  "AWS_LAMBDA_EXEC_WRAPPER": "/opt/otel-extension-internal-node/exec-wrapper.sh",
                  "SLS_EXTENSION": "{\"ingestToken\":\"920f23a1-982a-41d4-8c90-256064c7b14c\",\"orgId\":\"ed80830f-8021-40c8-8d68-3f3ff7dd1a4c\",\"namespace\":\"veganInspector\",\"environment\":\"dev\"}"
                }
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:177335420605:layer:sls-otel-extension-node-v0-5-2:1"
              ]
            },
            "DependsOn": [
              "CreateUserLogGroup"
            ]
          },
          "GetOneUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/veganInspector/dev/1665181927671-2022-10-07T22:32:07.671Z/veganInspector.zip"
              },
              "Handler": "handler.getOneUser",
              "Runtime": "nodejs16.x",
              "FunctionName": "veganInspector-dev-getOneUser",
              "MemorySize": 128,
              "Timeout": 10,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Environment": {
                "Variables": {
                  "AWS_LAMBDA_EXEC_WRAPPER": "/opt/otel-extension-internal-node/exec-wrapper.sh",
                  "SLS_EXTENSION": "{\"ingestToken\":\"920f23a1-982a-41d4-8c90-256064c7b14c\",\"orgId\":\"ed80830f-8021-40c8-8d68-3f3ff7dd1a4c\",\"namespace\":\"veganInspector\",\"environment\":\"dev\"}"
                }
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:177335420605:layer:sls-otel-extension-node-v0-5-2:1"
              ]
            },
            "DependsOn": [
              "GetOneUserLogGroup"
            ]
          },
          "GetAllUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/veganInspector/dev/1665181927671-2022-10-07T22:32:07.671Z/veganInspector.zip"
              },
              "Handler": "handler.getAllUser",
              "Runtime": "nodejs16.x",
              "FunctionName": "veganInspector-dev-getAllUser",
              "MemorySize": 128,
              "Timeout": 10,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Environment": {
                "Variables": {
                  "AWS_LAMBDA_EXEC_WRAPPER": "/opt/otel-extension-internal-node/exec-wrapper.sh",
                  "SLS_EXTENSION": "{\"ingestToken\":\"920f23a1-982a-41d4-8c90-256064c7b14c\",\"orgId\":\"ed80830f-8021-40c8-8d68-3f3ff7dd1a4c\",\"namespace\":\"veganInspector\",\"environment\":\"dev\"}"
                }
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:177335420605:layer:sls-otel-extension-node-v0-5-2:1"
              ]
            },
            "DependsOn": [
              "GetAllUserLogGroup"
            ]
          },
          "UpdateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/veganInspector/dev/1665181927671-2022-10-07T22:32:07.671Z/veganInspector.zip"
              },
              "Handler": "handler.updateUser",
              "Runtime": "nodejs16.x",
              "FunctionName": "veganInspector-dev-updateUser",
              "MemorySize": 128,
              "Timeout": 10,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Environment": {
                "Variables": {
                  "AWS_LAMBDA_EXEC_WRAPPER": "/opt/otel-extension-internal-node/exec-wrapper.sh",
                  "SLS_EXTENSION": "{\"ingestToken\":\"920f23a1-982a-41d4-8c90-256064c7b14c\",\"orgId\":\"ed80830f-8021-40c8-8d68-3f3ff7dd1a4c\",\"namespace\":\"veganInspector\",\"environment\":\"dev\"}"
                }
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:177335420605:layer:sls-otel-extension-node-v0-5-2:1"
              ]
            },
            "DependsOn": [
              "UpdateUserLogGroup"
            ]
          },
          "DeleteUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/veganInspector/dev/1665181927671-2022-10-07T22:32:07.671Z/veganInspector.zip"
              },
              "Handler": "handler.deleteUser",
              "Runtime": "nodejs16.x",
              "FunctionName": "veganInspector-dev-deleteUser",
              "MemorySize": 128,
              "Timeout": 10,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Environment": {
                "Variables": {
                  "AWS_LAMBDA_EXEC_WRAPPER": "/opt/otel-extension-internal-node/exec-wrapper.sh",
                  "SLS_EXTENSION": "{\"ingestToken\":\"920f23a1-982a-41d4-8c90-256064c7b14c\",\"orgId\":\"ed80830f-8021-40c8-8d68-3f3ff7dd1a4c\",\"namespace\":\"veganInspector\",\"environment\":\"dev\"}"
                }
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:177335420605:layer:sls-otel-extension-node-v0-5-2:1"
              ]
            },
            "DependsOn": [
              "DeleteUserLogGroup"
            ]
          },
          "CreateProductLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/veganInspector/dev/1665181927671-2022-10-07T22:32:07.671Z/veganInspector.zip"
              },
              "Handler": "handler.createProduct",
              "Runtime": "nodejs16.x",
              "FunctionName": "veganInspector-dev-createProduct",
              "MemorySize": 128,
              "Timeout": 10,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Environment": {
                "Variables": {
                  "AWS_LAMBDA_EXEC_WRAPPER": "/opt/otel-extension-internal-node/exec-wrapper.sh",
                  "SLS_EXTENSION": "{\"ingestToken\":\"920f23a1-982a-41d4-8c90-256064c7b14c\",\"orgId\":\"ed80830f-8021-40c8-8d68-3f3ff7dd1a4c\",\"namespace\":\"veganInspector\",\"environment\":\"dev\"}"
                }
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:177335420605:layer:sls-otel-extension-node-v0-5-2:1"
              ]
            },
            "DependsOn": [
              "CreateProductLogGroup"
            ]
          },
          "GetOneProductLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/veganInspector/dev/1665181927671-2022-10-07T22:32:07.671Z/veganInspector.zip"
              },
              "Handler": "handler.getOneProduct",
              "Runtime": "nodejs16.x",
              "FunctionName": "veganInspector-dev-getOneProduct",
              "MemorySize": 128,
              "Timeout": 10,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Environment": {
                "Variables": {
                  "AWS_LAMBDA_EXEC_WRAPPER": "/opt/otel-extension-internal-node/exec-wrapper.sh",
                  "SLS_EXTENSION": "{\"ingestToken\":\"920f23a1-982a-41d4-8c90-256064c7b14c\",\"orgId\":\"ed80830f-8021-40c8-8d68-3f3ff7dd1a4c\",\"namespace\":\"veganInspector\",\"environment\":\"dev\"}"
                }
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:177335420605:layer:sls-otel-extension-node-v0-5-2:1"
              ]
            },
            "DependsOn": [
              "GetOneProductLogGroup"
            ]
          },
          "GetAllProductLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/veganInspector/dev/1665181927671-2022-10-07T22:32:07.671Z/veganInspector.zip"
              },
              "Handler": "handler.getAllProduct",
              "Runtime": "nodejs16.x",
              "FunctionName": "veganInspector-dev-getAllProduct",
              "MemorySize": 128,
              "Timeout": 10,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Environment": {
                "Variables": {
                  "AWS_LAMBDA_EXEC_WRAPPER": "/opt/otel-extension-internal-node/exec-wrapper.sh",
                  "SLS_EXTENSION": "{\"ingestToken\":\"920f23a1-982a-41d4-8c90-256064c7b14c\",\"orgId\":\"ed80830f-8021-40c8-8d68-3f3ff7dd1a4c\",\"namespace\":\"veganInspector\",\"environment\":\"dev\"}"
                }
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:177335420605:layer:sls-otel-extension-node-v0-5-2:1"
              ]
            },
            "DependsOn": [
              "GetAllProductLogGroup"
            ]
          },
          "UpdateProductLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/veganInspector/dev/1665181927671-2022-10-07T22:32:07.671Z/veganInspector.zip"
              },
              "Handler": "handler.updateProduct",
              "Runtime": "nodejs16.x",
              "FunctionName": "veganInspector-dev-updateProduct",
              "MemorySize": 128,
              "Timeout": 10,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Environment": {
                "Variables": {
                  "AWS_LAMBDA_EXEC_WRAPPER": "/opt/otel-extension-internal-node/exec-wrapper.sh",
                  "SLS_EXTENSION": "{\"ingestToken\":\"920f23a1-982a-41d4-8c90-256064c7b14c\",\"orgId\":\"ed80830f-8021-40c8-8d68-3f3ff7dd1a4c\",\"namespace\":\"veganInspector\",\"environment\":\"dev\"}"
                }
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:177335420605:layer:sls-otel-extension-node-v0-5-2:1"
              ]
            },
            "DependsOn": [
              "UpdateProductLogGroup"
            ]
          },
          "DeleteProductLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/veganInspector/dev/1665181927671-2022-10-07T22:32:07.671Z/veganInspector.zip"
              },
              "Handler": "handler.deleteProduct",
              "Runtime": "nodejs16.x",
              "FunctionName": "veganInspector-dev-deleteProduct",
              "MemorySize": 128,
              "Timeout": 10,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Environment": {
                "Variables": {
                  "AWS_LAMBDA_EXEC_WRAPPER": "/opt/otel-extension-internal-node/exec-wrapper.sh",
                  "SLS_EXTENSION": "{\"ingestToken\":\"920f23a1-982a-41d4-8c90-256064c7b14c\",\"orgId\":\"ed80830f-8021-40c8-8d68-3f3ff7dd1a4c\",\"namespace\":\"veganInspector\",\"environment\":\"dev\"}"
                }
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:177335420605:layer:sls-otel-extension-node-v0-5-2:1"
              ]
            },
            "DependsOn": [
              "DeleteProductLogGroup"
            ]
          },
          "CreateReportProductLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/veganInspector/dev/1665181927671-2022-10-07T22:32:07.671Z/veganInspector.zip"
              },
              "Handler": "handler.createReportProduct",
              "Runtime": "nodejs16.x",
              "FunctionName": "veganInspector-dev-createReportProduct",
              "MemorySize": 128,
              "Timeout": 10,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Environment": {
                "Variables": {
                  "AWS_LAMBDA_EXEC_WRAPPER": "/opt/otel-extension-internal-node/exec-wrapper.sh",
                  "SLS_EXTENSION": "{\"ingestToken\":\"920f23a1-982a-41d4-8c90-256064c7b14c\",\"orgId\":\"ed80830f-8021-40c8-8d68-3f3ff7dd1a4c\",\"namespace\":\"veganInspector\",\"environment\":\"dev\"}"
                }
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:177335420605:layer:sls-otel-extension-node-v0-5-2:1"
              ]
            },
            "DependsOn": [
              "CreateReportProductLogGroup"
            ]
          },
          "DeleteReportProductLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/veganInspector/dev/1665181927671-2022-10-07T22:32:07.671Z/veganInspector.zip"
              },
              "Handler": "handler.deleteReportProduct",
              "Runtime": "nodejs16.x",
              "FunctionName": "veganInspector-dev-deleteReportProduct",
              "MemorySize": 128,
              "Timeout": 10,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Environment": {
                "Variables": {
                  "AWS_LAMBDA_EXEC_WRAPPER": "/opt/otel-extension-internal-node/exec-wrapper.sh",
                  "SLS_EXTENSION": "{\"ingestToken\":\"920f23a1-982a-41d4-8c90-256064c7b14c\",\"orgId\":\"ed80830f-8021-40c8-8d68-3f3ff7dd1a4c\",\"namespace\":\"veganInspector\",\"environment\":\"dev\"}"
                }
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:177335420605:layer:sls-otel-extension-node-v0-5-2:1"
              ]
            },
            "DependsOn": [
              "DeleteReportProductLogGroup"
            ]
          },
          "UpdateReportProductLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/veganInspector/dev/1665181927671-2022-10-07T22:32:07.671Z/veganInspector.zip"
              },
              "Handler": "handler.updateReportProduct",
              "Runtime": "nodejs16.x",
              "FunctionName": "veganInspector-dev-updateReportProduct",
              "MemorySize": 128,
              "Timeout": 10,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Environment": {
                "Variables": {
                  "AWS_LAMBDA_EXEC_WRAPPER": "/opt/otel-extension-internal-node/exec-wrapper.sh",
                  "SLS_EXTENSION": "{\"ingestToken\":\"920f23a1-982a-41d4-8c90-256064c7b14c\",\"orgId\":\"ed80830f-8021-40c8-8d68-3f3ff7dd1a4c\",\"namespace\":\"veganInspector\",\"environment\":\"dev\"}"
                }
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:177335420605:layer:sls-otel-extension-node-v0-5-2:1"
              ]
            },
            "DependsOn": [
              "UpdateReportProductLogGroup"
            ]
          },
          "CreateIngredientLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/veganInspector/dev/1665181927671-2022-10-07T22:32:07.671Z/veganInspector.zip"
              },
              "Handler": "handler.createIngredient",
              "Runtime": "nodejs16.x",
              "FunctionName": "veganInspector-dev-createIngredient",
              "MemorySize": 128,
              "Timeout": 10,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Environment": {
                "Variables": {
                  "AWS_LAMBDA_EXEC_WRAPPER": "/opt/otel-extension-internal-node/exec-wrapper.sh",
                  "SLS_EXTENSION": "{\"ingestToken\":\"920f23a1-982a-41d4-8c90-256064c7b14c\",\"orgId\":\"ed80830f-8021-40c8-8d68-3f3ff7dd1a4c\",\"namespace\":\"veganInspector\",\"environment\":\"dev\"}"
                }
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:177335420605:layer:sls-otel-extension-node-v0-5-2:1"
              ]
            },
            "DependsOn": [
              "CreateIngredientLogGroup"
            ]
          },
          "GetOneIngredientLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/veganInspector/dev/1665181927671-2022-10-07T22:32:07.671Z/veganInspector.zip"
              },
              "Handler": "handler.getOneIngredient",
              "Runtime": "nodejs16.x",
              "FunctionName": "veganInspector-dev-getOneIngredient",
              "MemorySize": 128,
              "Timeout": 10,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Environment": {
                "Variables": {
                  "AWS_LAMBDA_EXEC_WRAPPER": "/opt/otel-extension-internal-node/exec-wrapper.sh",
                  "SLS_EXTENSION": "{\"ingestToken\":\"920f23a1-982a-41d4-8c90-256064c7b14c\",\"orgId\":\"ed80830f-8021-40c8-8d68-3f3ff7dd1a4c\",\"namespace\":\"veganInspector\",\"environment\":\"dev\"}"
                }
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:177335420605:layer:sls-otel-extension-node-v0-5-2:1"
              ]
            },
            "DependsOn": [
              "GetOneIngredientLogGroup"
            ]
          },
          "GetAllIngredientLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/veganInspector/dev/1665181927671-2022-10-07T22:32:07.671Z/veganInspector.zip"
              },
              "Handler": "handler.getAllIngredient",
              "Runtime": "nodejs16.x",
              "FunctionName": "veganInspector-dev-getAllIngredient",
              "MemorySize": 128,
              "Timeout": 10,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Environment": {
                "Variables": {
                  "AWS_LAMBDA_EXEC_WRAPPER": "/opt/otel-extension-internal-node/exec-wrapper.sh",
                  "SLS_EXTENSION": "{\"ingestToken\":\"920f23a1-982a-41d4-8c90-256064c7b14c\",\"orgId\":\"ed80830f-8021-40c8-8d68-3f3ff7dd1a4c\",\"namespace\":\"veganInspector\",\"environment\":\"dev\"}"
                }
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:177335420605:layer:sls-otel-extension-node-v0-5-2:1"
              ]
            },
            "DependsOn": [
              "GetAllIngredientLogGroup"
            ]
          },
          "UpdateIngredientLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/veganInspector/dev/1665181927671-2022-10-07T22:32:07.671Z/veganInspector.zip"
              },
              "Handler": "handler.updateIngredient",
              "Runtime": "nodejs16.x",
              "FunctionName": "veganInspector-dev-updateIngredient",
              "MemorySize": 128,
              "Timeout": 10,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Environment": {
                "Variables": {
                  "AWS_LAMBDA_EXEC_WRAPPER": "/opt/otel-extension-internal-node/exec-wrapper.sh",
                  "SLS_EXTENSION": "{\"ingestToken\":\"920f23a1-982a-41d4-8c90-256064c7b14c\",\"orgId\":\"ed80830f-8021-40c8-8d68-3f3ff7dd1a4c\",\"namespace\":\"veganInspector\",\"environment\":\"dev\"}"
                }
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:177335420605:layer:sls-otel-extension-node-v0-5-2:1"
              ]
            },
            "DependsOn": [
              "UpdateIngredientLogGroup"
            ]
          },
          "DeleteIngredientLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/veganInspector/dev/1665181927671-2022-10-07T22:32:07.671Z/veganInspector.zip"
              },
              "Handler": "handler.deleteIngredient",
              "Runtime": "nodejs16.x",
              "FunctionName": "veganInspector-dev-deleteIngredient",
              "MemorySize": 128,
              "Timeout": 10,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Environment": {
                "Variables": {
                  "AWS_LAMBDA_EXEC_WRAPPER": "/opt/otel-extension-internal-node/exec-wrapper.sh",
                  "SLS_EXTENSION": "{\"ingestToken\":\"920f23a1-982a-41d4-8c90-256064c7b14c\",\"orgId\":\"ed80830f-8021-40c8-8d68-3f3ff7dd1a4c\",\"namespace\":\"veganInspector\",\"environment\":\"dev\"}"
                }
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:177335420605:layer:sls-otel-extension-node-v0-5-2:1"
              ]
            },
            "DependsOn": [
              "DeleteIngredientLogGroup"
            ]
          },
          "CreateCommentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/veganInspector/dev/1665181927671-2022-10-07T22:32:07.671Z/veganInspector.zip"
              },
              "Handler": "handler.createComment",
              "Runtime": "nodejs16.x",
              "FunctionName": "veganInspector-dev-createComment",
              "MemorySize": 128,
              "Timeout": 10,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Environment": {
                "Variables": {
                  "AWS_LAMBDA_EXEC_WRAPPER": "/opt/otel-extension-internal-node/exec-wrapper.sh",
                  "SLS_EXTENSION": "{\"ingestToken\":\"920f23a1-982a-41d4-8c90-256064c7b14c\",\"orgId\":\"ed80830f-8021-40c8-8d68-3f3ff7dd1a4c\",\"namespace\":\"veganInspector\",\"environment\":\"dev\"}"
                }
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:177335420605:layer:sls-otel-extension-node-v0-5-2:1"
              ]
            },
            "DependsOn": [
              "CreateCommentLogGroup"
            ]
          },
          "GetOneCommentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/veganInspector/dev/1665181927671-2022-10-07T22:32:07.671Z/veganInspector.zip"
              },
              "Handler": "handler.getOneComment",
              "Runtime": "nodejs16.x",
              "FunctionName": "veganInspector-dev-getOneComment",
              "MemorySize": 128,
              "Timeout": 10,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Environment": {
                "Variables": {
                  "AWS_LAMBDA_EXEC_WRAPPER": "/opt/otel-extension-internal-node/exec-wrapper.sh",
                  "SLS_EXTENSION": "{\"ingestToken\":\"920f23a1-982a-41d4-8c90-256064c7b14c\",\"orgId\":\"ed80830f-8021-40c8-8d68-3f3ff7dd1a4c\",\"namespace\":\"veganInspector\",\"environment\":\"dev\"}"
                }
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:177335420605:layer:sls-otel-extension-node-v0-5-2:1"
              ]
            },
            "DependsOn": [
              "GetOneCommentLogGroup"
            ]
          },
          "GetAllCommentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/veganInspector/dev/1665181927671-2022-10-07T22:32:07.671Z/veganInspector.zip"
              },
              "Handler": "handler.getAllComment",
              "Runtime": "nodejs16.x",
              "FunctionName": "veganInspector-dev-getAllComment",
              "MemorySize": 128,
              "Timeout": 10,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Environment": {
                "Variables": {
                  "AWS_LAMBDA_EXEC_WRAPPER": "/opt/otel-extension-internal-node/exec-wrapper.sh",
                  "SLS_EXTENSION": "{\"ingestToken\":\"920f23a1-982a-41d4-8c90-256064c7b14c\",\"orgId\":\"ed80830f-8021-40c8-8d68-3f3ff7dd1a4c\",\"namespace\":\"veganInspector\",\"environment\":\"dev\"}"
                }
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:177335420605:layer:sls-otel-extension-node-v0-5-2:1"
              ]
            },
            "DependsOn": [
              "GetAllCommentLogGroup"
            ]
          },
          "UpdateCommentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/veganInspector/dev/1665181927671-2022-10-07T22:32:07.671Z/veganInspector.zip"
              },
              "Handler": "handler.updateComment",
              "Runtime": "nodejs16.x",
              "FunctionName": "veganInspector-dev-updateComment",
              "MemorySize": 128,
              "Timeout": 10,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Environment": {
                "Variables": {
                  "AWS_LAMBDA_EXEC_WRAPPER": "/opt/otel-extension-internal-node/exec-wrapper.sh",
                  "SLS_EXTENSION": "{\"ingestToken\":\"920f23a1-982a-41d4-8c90-256064c7b14c\",\"orgId\":\"ed80830f-8021-40c8-8d68-3f3ff7dd1a4c\",\"namespace\":\"veganInspector\",\"environment\":\"dev\"}"
                }
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:177335420605:layer:sls-otel-extension-node-v0-5-2:1"
              ]
            },
            "DependsOn": [
              "UpdateCommentLogGroup"
            ]
          },
          "DeleteCommentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/veganInspector/dev/1665181927671-2022-10-07T22:32:07.671Z/veganInspector.zip"
              },
              "Handler": "handler.deleteComment",
              "Runtime": "nodejs16.x",
              "FunctionName": "veganInspector-dev-deleteComment",
              "MemorySize": 128,
              "Timeout": 10,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Environment": {
                "Variables": {
                  "AWS_LAMBDA_EXEC_WRAPPER": "/opt/otel-extension-internal-node/exec-wrapper.sh",
                  "SLS_EXTENSION": "{\"ingestToken\":\"920f23a1-982a-41d4-8c90-256064c7b14c\",\"orgId\":\"ed80830f-8021-40c8-8d68-3f3ff7dd1a4c\",\"namespace\":\"veganInspector\",\"environment\":\"dev\"}"
                }
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:177335420605:layer:sls-otel-extension-node-v0-5-2:1"
              ]
            },
            "DependsOn": [
              "DeleteCommentLogGroup"
            ]
          },
          "IncreaseCommentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/veganInspector/dev/1665181927671-2022-10-07T22:32:07.671Z/veganInspector.zip"
              },
              "Handler": "handler.increaseComment",
              "Runtime": "nodejs16.x",
              "FunctionName": "veganInspector-dev-increaseComment",
              "MemorySize": 128,
              "Timeout": 10,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Environment": {
                "Variables": {
                  "AWS_LAMBDA_EXEC_WRAPPER": "/opt/otel-extension-internal-node/exec-wrapper.sh",
                  "SLS_EXTENSION": "{\"ingestToken\":\"920f23a1-982a-41d4-8c90-256064c7b14c\",\"orgId\":\"ed80830f-8021-40c8-8d68-3f3ff7dd1a4c\",\"namespace\":\"veganInspector\",\"environment\":\"dev\"}"
                }
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:177335420605:layer:sls-otel-extension-node-v0-5-2:1"
              ]
            },
            "DependsOn": [
              "IncreaseCommentLogGroup"
            ]
          },
          "DecreaseCommentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/veganInspector/dev/1665181927671-2022-10-07T22:32:07.671Z/veganInspector.zip"
              },
              "Handler": "handler.decreaseComment",
              "Runtime": "nodejs16.x",
              "FunctionName": "veganInspector-dev-decreaseComment",
              "MemorySize": 128,
              "Timeout": 10,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Environment": {
                "Variables": {
                  "AWS_LAMBDA_EXEC_WRAPPER": "/opt/otel-extension-internal-node/exec-wrapper.sh",
                  "SLS_EXTENSION": "{\"ingestToken\":\"920f23a1-982a-41d4-8c90-256064c7b14c\",\"orgId\":\"ed80830f-8021-40c8-8d68-3f3ff7dd1a4c\",\"namespace\":\"veganInspector\",\"environment\":\"dev\"}"
                }
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:177335420605:layer:sls-otel-extension-node-v0-5-2:1"
              ]
            },
            "DependsOn": [
              "DecreaseCommentLogGroup"
            ]
          },
          "CreateReportCommentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/veganInspector/dev/1665181927671-2022-10-07T22:32:07.671Z/veganInspector.zip"
              },
              "Handler": "handler.createReportComment",
              "Runtime": "nodejs16.x",
              "FunctionName": "veganInspector-dev-createReportComment",
              "MemorySize": 128,
              "Timeout": 10,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Environment": {
                "Variables": {
                  "AWS_LAMBDA_EXEC_WRAPPER": "/opt/otel-extension-internal-node/exec-wrapper.sh",
                  "SLS_EXTENSION": "{\"ingestToken\":\"920f23a1-982a-41d4-8c90-256064c7b14c\",\"orgId\":\"ed80830f-8021-40c8-8d68-3f3ff7dd1a4c\",\"namespace\":\"veganInspector\",\"environment\":\"dev\"}"
                }
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:177335420605:layer:sls-otel-extension-node-v0-5-2:1"
              ]
            },
            "DependsOn": [
              "CreateReportCommentLogGroup"
            ]
          },
          "DeleteReportCommentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/veganInspector/dev/1665181927671-2022-10-07T22:32:07.671Z/veganInspector.zip"
              },
              "Handler": "handler.deleteReportComment",
              "Runtime": "nodejs16.x",
              "FunctionName": "veganInspector-dev-deleteReportComment",
              "MemorySize": 128,
              "Timeout": 10,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Environment": {
                "Variables": {
                  "AWS_LAMBDA_EXEC_WRAPPER": "/opt/otel-extension-internal-node/exec-wrapper.sh",
                  "SLS_EXTENSION": "{\"ingestToken\":\"920f23a1-982a-41d4-8c90-256064c7b14c\",\"orgId\":\"ed80830f-8021-40c8-8d68-3f3ff7dd1a4c\",\"namespace\":\"veganInspector\",\"environment\":\"dev\"}"
                }
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:177335420605:layer:sls-otel-extension-node-v0-5-2:1"
              ]
            },
            "DependsOn": [
              "DeleteReportCommentLogGroup"
            ]
          },
          "UpdateReportCommentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/veganInspector/dev/1665181927671-2022-10-07T22:32:07.671Z/veganInspector.zip"
              },
              "Handler": "handler.updateReportComment",
              "Runtime": "nodejs16.x",
              "FunctionName": "veganInspector-dev-updateReportComment",
              "MemorySize": 128,
              "Timeout": 10,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Environment": {
                "Variables": {
                  "AWS_LAMBDA_EXEC_WRAPPER": "/opt/otel-extension-internal-node/exec-wrapper.sh",
                  "SLS_EXTENSION": "{\"ingestToken\":\"920f23a1-982a-41d4-8c90-256064c7b14c\",\"orgId\":\"ed80830f-8021-40c8-8d68-3f3ff7dd1a4c\",\"namespace\":\"veganInspector\",\"environment\":\"dev\"}"
                }
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:177335420605:layer:sls-otel-extension-node-v0-5-2:1"
              ]
            },
            "DependsOn": [
              "UpdateReportCommentLogGroup"
            ]
          },
          "CreateUserLambdaVersionZAZdTvhYtw5NV8lchONz4sOAt6RTWAaH9uQtPyanB0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateUserLambdaFunction"
              },
              "CodeSha256": "sBZ5tcsHfIYx9ZUne8resmhh/wY/yihpEHaEEvEZ7Do="
            }
          },
          "GetOneUserLambdaVersionbjYsqzLZovFKn1YsEhGSWsbCTwfGVcxMr3verhnjuo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetOneUserLambdaFunction"
              },
              "CodeSha256": "sBZ5tcsHfIYx9ZUne8resmhh/wY/yihpEHaEEvEZ7Do="
            }
          },
          "GetAllUserLambdaVersioncT1VYiOhVm8XtA9uCWuODblzALrYMmqGNvNnwpBYxY4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllUserLambdaFunction"
              },
              "CodeSha256": "sBZ5tcsHfIYx9ZUne8resmhh/wY/yihpEHaEEvEZ7Do="
            }
          },
          "UpdateUserLambdaVersionfzH6kDwzfmWLatDP8KHn77KXdS4FYJVqH9KrcNSocMU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateUserLambdaFunction"
              },
              "CodeSha256": "sBZ5tcsHfIYx9ZUne8resmhh/wY/yihpEHaEEvEZ7Do="
            }
          },
          "DeleteUserLambdaVersionwdxTWRU47QixlRNwcs5NkHn2PUBXfhyNGPaBEzaQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteUserLambdaFunction"
              },
              "CodeSha256": "sBZ5tcsHfIYx9ZUne8resmhh/wY/yihpEHaEEvEZ7Do="
            }
          },
          "CreateProductLambdaVersionzZe0Ae56DzM3z5dfMFZXR4FXbxWrqpGzhE3FioIhI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateProductLambdaFunction"
              },
              "CodeSha256": "sBZ5tcsHfIYx9ZUne8resmhh/wY/yihpEHaEEvEZ7Do="
            }
          },
          "GetOneProductLambdaVersion1LJlvF7pFdwoOwazXqbA424xyd4Y3kPz1hDp9KsxwZ4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetOneProductLambdaFunction"
              },
              "CodeSha256": "sBZ5tcsHfIYx9ZUne8resmhh/wY/yihpEHaEEvEZ7Do="
            }
          },
          "GetAllProductLambdaVersion6a0whl9P6sCgcLdQFvX1jpdSj05pKYqJkyUA9b1vo4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllProductLambdaFunction"
              },
              "CodeSha256": "sBZ5tcsHfIYx9ZUne8resmhh/wY/yihpEHaEEvEZ7Do="
            }
          },
          "UpdateProductLambdaVersioniNMQFkaDRkKsZflkrvcTDfMLlZS2qsh6ZNW9xQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateProductLambdaFunction"
              },
              "CodeSha256": "sBZ5tcsHfIYx9ZUne8resmhh/wY/yihpEHaEEvEZ7Do="
            }
          },
          "DeleteProductLambdaVersionpQl7yLQ6qFtWNyi5YyflsPI5mEyumMreep11aBnEw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteProductLambdaFunction"
              },
              "CodeSha256": "sBZ5tcsHfIYx9ZUne8resmhh/wY/yihpEHaEEvEZ7Do="
            }
          },
          "CreateReportProductLambdaVersionQVr2aagOjXQX7u66IoXnxWTfIlNFjCGqNQtFrEVP5Q": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateReportProductLambdaFunction"
              },
              "CodeSha256": "sBZ5tcsHfIYx9ZUne8resmhh/wY/yihpEHaEEvEZ7Do="
            }
          },
          "DeleteReportProductLambdaVersionkzwuQOlnAftU48PrSU9prpZNoR9UuxB32bApSIK4Gtc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteReportProductLambdaFunction"
              },
              "CodeSha256": "sBZ5tcsHfIYx9ZUne8resmhh/wY/yihpEHaEEvEZ7Do="
            }
          },
          "UpdateReportProductLambdaVersionQizWcyLDiveeYhT06UCPIR3ZxSk0WoykNI4zRIwvtrk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateReportProductLambdaFunction"
              },
              "CodeSha256": "sBZ5tcsHfIYx9ZUne8resmhh/wY/yihpEHaEEvEZ7Do="
            }
          },
          "CreateIngredientLambdaVersionwOkP3Jpqf5BtwUVsQe3lhT8g6ocDkrMVd9PHEZrkZdU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateIngredientLambdaFunction"
              },
              "CodeSha256": "sBZ5tcsHfIYx9ZUne8resmhh/wY/yihpEHaEEvEZ7Do="
            }
          },
          "GetOneIngredientLambdaVersiongOSD7RTbOaAZNdXOHV2XVtDKvnZWPksBA0FNmNGcwk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetOneIngredientLambdaFunction"
              },
              "CodeSha256": "sBZ5tcsHfIYx9ZUne8resmhh/wY/yihpEHaEEvEZ7Do="
            }
          },
          "GetAllIngredientLambdaVersion1fxJxISSNbyPkhp6mkuXeLjbaHR7gu2BTkxaVCtkPU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllIngredientLambdaFunction"
              },
              "CodeSha256": "sBZ5tcsHfIYx9ZUne8resmhh/wY/yihpEHaEEvEZ7Do="
            }
          },
          "UpdateIngredientLambdaVersionDAjkqrU5moSMwhGYBOdz0jEELvffEPIzMjkQcpQ5PY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateIngredientLambdaFunction"
              },
              "CodeSha256": "sBZ5tcsHfIYx9ZUne8resmhh/wY/yihpEHaEEvEZ7Do="
            }
          },
          "DeleteIngredientLambdaVersionDDrGPuMyBf9yRpXbZRRRcfXyJpGvr92HFBKjCbK9l8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteIngredientLambdaFunction"
              },
              "CodeSha256": "sBZ5tcsHfIYx9ZUne8resmhh/wY/yihpEHaEEvEZ7Do="
            }
          },
          "CreateCommentLambdaVersiongipLLfDfJV4hzMMvBn4ol5jyZCWIuaHjcknGSu0sao": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateCommentLambdaFunction"
              },
              "CodeSha256": "sBZ5tcsHfIYx9ZUne8resmhh/wY/yihpEHaEEvEZ7Do="
            }
          },
          "GetOneCommentLambdaVersionROoIGHfHZQ8fRRjHl7WSRSe5s644ms32fp0qdWIR08": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetOneCommentLambdaFunction"
              },
              "CodeSha256": "sBZ5tcsHfIYx9ZUne8resmhh/wY/yihpEHaEEvEZ7Do="
            }
          },
          "GetAllCommentLambdaVersion6M8xIorEhh6ea5GUpdxZrpQNI207eVHrqdeUmGW8JQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllCommentLambdaFunction"
              },
              "CodeSha256": "sBZ5tcsHfIYx9ZUne8resmhh/wY/yihpEHaEEvEZ7Do="
            }
          },
          "UpdateCommentLambdaVersionVwaZv5Szz2sE8avDTDd6PrVFH9CoXFvMJLisDrdtiQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateCommentLambdaFunction"
              },
              "CodeSha256": "sBZ5tcsHfIYx9ZUne8resmhh/wY/yihpEHaEEvEZ7Do="
            }
          },
          "DeleteCommentLambdaVersion7nhP4biXTJUEPkpontBn4oPyyKWVv63O2tQSSlfCjPI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteCommentLambdaFunction"
              },
              "CodeSha256": "sBZ5tcsHfIYx9ZUne8resmhh/wY/yihpEHaEEvEZ7Do="
            }
          },
          "IncreaseCommentLambdaVersionDttBX5WEAgttG9EUP9m0vsFAzUVemBrm155Tc3guw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "IncreaseCommentLambdaFunction"
              },
              "CodeSha256": "sBZ5tcsHfIYx9ZUne8resmhh/wY/yihpEHaEEvEZ7Do="
            }
          },
          "DecreaseCommentLambdaVersiondhC3dBKWlXdTy0fVRMLS2BzggtqMFlhvfTwn3nIV1hI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DecreaseCommentLambdaFunction"
              },
              "CodeSha256": "sBZ5tcsHfIYx9ZUne8resmhh/wY/yihpEHaEEvEZ7Do="
            }
          },
          "CreateReportCommentLambdaVersion9IGADDRX79SaQQSpB9FtIMekjfbVsZYQjFyfJyYLpU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateReportCommentLambdaFunction"
              },
              "CodeSha256": "sBZ5tcsHfIYx9ZUne8resmhh/wY/yihpEHaEEvEZ7Do="
            }
          },
          "DeleteReportCommentLambdaVersionp93JCoSzIWLBfqeok4wg0v7zQ1bTt8ghvqihThcnc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteReportCommentLambdaFunction"
              },
              "CodeSha256": "sBZ5tcsHfIYx9ZUne8resmhh/wY/yihpEHaEEvEZ7Do="
            }
          },
          "UpdateReportCommentLambdaVersionWzajcMowo3Gz8CeS09kJpPUTc8hceqP79V7RHOWM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateReportCommentLambdaFunction"
              },
              "CodeSha256": "sBZ5tcsHfIYx9ZUne8resmhh/wY/yihpEHaEEvEZ7Do="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-veganInspector",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceUser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "user",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceProduct": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "product",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceProductIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceProduct"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceReportproduct": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "reportProduct",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceReportproductIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceReportproduct"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceIngredient": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "ingredient",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceIngredientIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceIngredient"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceComment": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "comment",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCommentIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceComment"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceIncreasecomment": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "increaseComment",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceIncreasecommentIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceIncreasecomment"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDecreasecomment": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "decreaseComment",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDecreasecommentIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceDecreasecomment"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceReportcomment": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "reportComment",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceReportcommentIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceReportcomment"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodProductOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceProduct"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodProductIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceProductIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodReportproductIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT,DELETE,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceReportproductIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodIngredientOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceIngredient"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodIngredientIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceIngredientIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodCommentOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceComment"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodCommentIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceCommentIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodIncreasecommentIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceIncreasecommentIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodDecreasecommentIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceDecreasecommentIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodReportcommentIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT,DELETE,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceReportcommentIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUserIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetOneUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetOneUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUserGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetAllUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUserIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUserIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodProductPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProduct"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateProductLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateProductLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodProductIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProductIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetOneProductLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetOneProductLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodProductGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProduct"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllProductLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetAllProductLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodProductIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProductIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateProductLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateProductLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodProductIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProductIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteProductLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteProductLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodReportproductIdVarPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceReportproductIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateReportProductLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateReportProductLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodReportproductIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceReportproductIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteReportProductLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteReportProductLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodReportproductIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceReportproductIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateReportProductLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateReportProductLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodIngredientPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceIngredient"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateIngredientLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateIngredientLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodIngredientIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceIngredientIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetOneIngredientLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetOneIngredientLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodIngredientGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceIngredient"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllIngredientLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetAllIngredientLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodIngredientIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceIngredientIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateIngredientLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateIngredientLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodIngredientIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceIngredientIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteIngredientLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteIngredientLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCommentPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceComment"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateCommentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateCommentLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCommentIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCommentIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetOneCommentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetOneCommentLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCommentGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceComment"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllCommentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetAllCommentLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCommentIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCommentIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateCommentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateCommentLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCommentIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCommentIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteCommentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteCommentLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodIncreasecommentIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceIncreasecommentIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "IncreaseCommentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "IncreaseCommentLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodDecreasecommentIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDecreasecommentIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DecreaseCommentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DecreaseCommentLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodReportcommentIdVarPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceReportcommentIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateReportCommentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateReportCommentLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodReportcommentIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceReportcommentIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteReportCommentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteReportCommentLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodReportcommentIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceReportcommentIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateReportCommentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateReportCommentLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1665181921784": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodUserOptions",
              "ApiGatewayMethodUserIdVarOptions",
              "ApiGatewayMethodProductOptions",
              "ApiGatewayMethodProductIdVarOptions",
              "ApiGatewayMethodReportproductIdVarOptions",
              "ApiGatewayMethodIngredientOptions",
              "ApiGatewayMethodIngredientIdVarOptions",
              "ApiGatewayMethodCommentOptions",
              "ApiGatewayMethodCommentIdVarOptions",
              "ApiGatewayMethodIncreasecommentIdVarOptions",
              "ApiGatewayMethodDecreasecommentIdVarOptions",
              "ApiGatewayMethodReportcommentIdVarOptions",
              "ApiGatewayMethodUserPost",
              "ApiGatewayMethodUserIdVarGet",
              "ApiGatewayMethodUserGet",
              "ApiGatewayMethodUserIdVarPut",
              "ApiGatewayMethodUserIdVarDelete",
              "ApiGatewayMethodProductPost",
              "ApiGatewayMethodProductIdVarGet",
              "ApiGatewayMethodProductGet",
              "ApiGatewayMethodProductIdVarPut",
              "ApiGatewayMethodProductIdVarDelete",
              "ApiGatewayMethodReportproductIdVarPost",
              "ApiGatewayMethodReportproductIdVarDelete",
              "ApiGatewayMethodReportproductIdVarPut",
              "ApiGatewayMethodIngredientPost",
              "ApiGatewayMethodIngredientIdVarGet",
              "ApiGatewayMethodIngredientGet",
              "ApiGatewayMethodIngredientIdVarPut",
              "ApiGatewayMethodIngredientIdVarDelete",
              "ApiGatewayMethodCommentPost",
              "ApiGatewayMethodCommentIdVarGet",
              "ApiGatewayMethodCommentGet",
              "ApiGatewayMethodCommentIdVarPut",
              "ApiGatewayMethodCommentIdVarDelete",
              "ApiGatewayMethodIncreasecommentIdVarPut",
              "ApiGatewayMethodDecreasecommentIdVarPut",
              "ApiGatewayMethodReportcommentIdVarPost",
              "ApiGatewayMethodReportcommentIdVarDelete",
              "ApiGatewayMethodReportcommentIdVarPut"
            ]
          },
          "CreateUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetOneUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetOneUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetAllUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateProductLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateProductLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetOneProductLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetOneProductLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetAllProductLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllProductLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateProductLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateProductLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteProductLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteProductLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateReportProductLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateReportProductLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteReportProductLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteReportProductLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateReportProductLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateReportProductLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateIngredientLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateIngredientLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetOneIngredientLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetOneIngredientLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetAllIngredientLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllIngredientLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateIngredientLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateIngredientLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteIngredientLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteIngredientLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateCommentLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateCommentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetOneCommentLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetOneCommentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetAllCommentLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllCommentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateCommentLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateCommentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteCommentLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteCommentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "IncreaseCommentLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "IncreaseCommentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DecreaseCommentLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DecreaseCommentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateReportCommentLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateReportCommentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteReportCommentLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteReportCommentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateReportCommentLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateReportCommentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-veganInspector-dev-ServerlessDeploymentBucketName"
            }
          },
          "CreateUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateUserLambdaVersionZAZdTvhYtw5NV8lchONz4sOAt6RTWAaH9uQtPyanB0"
            },
            "Export": {
              "Name": "sls-veganInspector-dev-CreateUserLambdaFunctionQualifiedArn"
            }
          },
          "GetOneUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetOneUserLambdaVersionbjYsqzLZovFKn1YsEhGSWsbCTwfGVcxMr3verhnjuo"
            },
            "Export": {
              "Name": "sls-veganInspector-dev-GetOneUserLambdaFunctionQualifiedArn"
            }
          },
          "GetAllUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllUserLambdaVersioncT1VYiOhVm8XtA9uCWuODblzALrYMmqGNvNnwpBYxY4"
            },
            "Export": {
              "Name": "sls-veganInspector-dev-GetAllUserLambdaFunctionQualifiedArn"
            }
          },
          "UpdateUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateUserLambdaVersionfzH6kDwzfmWLatDP8KHn77KXdS4FYJVqH9KrcNSocMU"
            },
            "Export": {
              "Name": "sls-veganInspector-dev-UpdateUserLambdaFunctionQualifiedArn"
            }
          },
          "DeleteUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteUserLambdaVersionwdxTWRU47QixlRNwcs5NkHn2PUBXfhyNGPaBEzaQ"
            },
            "Export": {
              "Name": "sls-veganInspector-dev-DeleteUserLambdaFunctionQualifiedArn"
            }
          },
          "CreateProductLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateProductLambdaVersionzZe0Ae56DzM3z5dfMFZXR4FXbxWrqpGzhE3FioIhI"
            },
            "Export": {
              "Name": "sls-veganInspector-dev-CreateProductLambdaFunctionQualifiedArn"
            }
          },
          "GetOneProductLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetOneProductLambdaVersion1LJlvF7pFdwoOwazXqbA424xyd4Y3kPz1hDp9KsxwZ4"
            },
            "Export": {
              "Name": "sls-veganInspector-dev-GetOneProductLambdaFunctionQualifiedArn"
            }
          },
          "GetAllProductLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllProductLambdaVersion6a0whl9P6sCgcLdQFvX1jpdSj05pKYqJkyUA9b1vo4"
            },
            "Export": {
              "Name": "sls-veganInspector-dev-GetAllProductLambdaFunctionQualifiedArn"
            }
          },
          "UpdateProductLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateProductLambdaVersioniNMQFkaDRkKsZflkrvcTDfMLlZS2qsh6ZNW9xQ"
            },
            "Export": {
              "Name": "sls-veganInspector-dev-UpdateProductLambdaFunctionQualifiedArn"
            }
          },
          "DeleteProductLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteProductLambdaVersionpQl7yLQ6qFtWNyi5YyflsPI5mEyumMreep11aBnEw"
            },
            "Export": {
              "Name": "sls-veganInspector-dev-DeleteProductLambdaFunctionQualifiedArn"
            }
          },
          "CreateReportProductLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateReportProductLambdaVersionQVr2aagOjXQX7u66IoXnxWTfIlNFjCGqNQtFrEVP5Q"
            },
            "Export": {
              "Name": "sls-veganInspector-dev-CreateReportProductLambdaFunctionQualifiedArn"
            }
          },
          "DeleteReportProductLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteReportProductLambdaVersionkzwuQOlnAftU48PrSU9prpZNoR9UuxB32bApSIK4Gtc"
            },
            "Export": {
              "Name": "sls-veganInspector-dev-DeleteReportProductLambdaFunctionQualifiedArn"
            }
          },
          "UpdateReportProductLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateReportProductLambdaVersionQizWcyLDiveeYhT06UCPIR3ZxSk0WoykNI4zRIwvtrk"
            },
            "Export": {
              "Name": "sls-veganInspector-dev-UpdateReportProductLambdaFunctionQualifiedArn"
            }
          },
          "CreateIngredientLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateIngredientLambdaVersionwOkP3Jpqf5BtwUVsQe3lhT8g6ocDkrMVd9PHEZrkZdU"
            },
            "Export": {
              "Name": "sls-veganInspector-dev-CreateIngredientLambdaFunctionQualifiedArn"
            }
          },
          "GetOneIngredientLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetOneIngredientLambdaVersiongOSD7RTbOaAZNdXOHV2XVtDKvnZWPksBA0FNmNGcwk"
            },
            "Export": {
              "Name": "sls-veganInspector-dev-GetOneIngredientLambdaFunctionQualifiedArn"
            }
          },
          "GetAllIngredientLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllIngredientLambdaVersion1fxJxISSNbyPkhp6mkuXeLjbaHR7gu2BTkxaVCtkPU"
            },
            "Export": {
              "Name": "sls-veganInspector-dev-GetAllIngredientLambdaFunctionQualifiedArn"
            }
          },
          "UpdateIngredientLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateIngredientLambdaVersionDAjkqrU5moSMwhGYBOdz0jEELvffEPIzMjkQcpQ5PY"
            },
            "Export": {
              "Name": "sls-veganInspector-dev-UpdateIngredientLambdaFunctionQualifiedArn"
            }
          },
          "DeleteIngredientLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteIngredientLambdaVersionDDrGPuMyBf9yRpXbZRRRcfXyJpGvr92HFBKjCbK9l8"
            },
            "Export": {
              "Name": "sls-veganInspector-dev-DeleteIngredientLambdaFunctionQualifiedArn"
            }
          },
          "CreateCommentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateCommentLambdaVersiongipLLfDfJV4hzMMvBn4ol5jyZCWIuaHjcknGSu0sao"
            },
            "Export": {
              "Name": "sls-veganInspector-dev-CreateCommentLambdaFunctionQualifiedArn"
            }
          },
          "GetOneCommentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetOneCommentLambdaVersionROoIGHfHZQ8fRRjHl7WSRSe5s644ms32fp0qdWIR08"
            },
            "Export": {
              "Name": "sls-veganInspector-dev-GetOneCommentLambdaFunctionQualifiedArn"
            }
          },
          "GetAllCommentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllCommentLambdaVersion6M8xIorEhh6ea5GUpdxZrpQNI207eVHrqdeUmGW8JQ"
            },
            "Export": {
              "Name": "sls-veganInspector-dev-GetAllCommentLambdaFunctionQualifiedArn"
            }
          },
          "UpdateCommentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateCommentLambdaVersionVwaZv5Szz2sE8avDTDd6PrVFH9CoXFvMJLisDrdtiQ"
            },
            "Export": {
              "Name": "sls-veganInspector-dev-UpdateCommentLambdaFunctionQualifiedArn"
            }
          },
          "DeleteCommentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteCommentLambdaVersion7nhP4biXTJUEPkpontBn4oPyyKWVv63O2tQSSlfCjPI"
            },
            "Export": {
              "Name": "sls-veganInspector-dev-DeleteCommentLambdaFunctionQualifiedArn"
            }
          },
          "IncreaseCommentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "IncreaseCommentLambdaVersionDttBX5WEAgttG9EUP9m0vsFAzUVemBrm155Tc3guw"
            },
            "Export": {
              "Name": "sls-veganInspector-dev-IncreaseCommentLambdaFunctionQualifiedArn"
            }
          },
          "DecreaseCommentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DecreaseCommentLambdaVersiondhC3dBKWlXdTy0fVRMLS2BzggtqMFlhvfTwn3nIV1hI"
            },
            "Export": {
              "Name": "sls-veganInspector-dev-DecreaseCommentLambdaFunctionQualifiedArn"
            }
          },
          "CreateReportCommentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateReportCommentLambdaVersion9IGADDRX79SaQQSpB9FtIMekjfbVsZYQjFyfJyYLpU"
            },
            "Export": {
              "Name": "sls-veganInspector-dev-CreateReportCommentLambdaFunctionQualifiedArn"
            }
          },
          "DeleteReportCommentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteReportCommentLambdaVersionp93JCoSzIWLBfqeok4wg0v7zQ1bTt8ghvqihThcnc"
            },
            "Export": {
              "Name": "sls-veganInspector-dev-DeleteReportCommentLambdaFunctionQualifiedArn"
            }
          },
          "UpdateReportCommentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateReportCommentLambdaVersionWzajcMowo3Gz8CeS09kJpPUTc8hceqP79V7RHOWM"
            },
            "Export": {
              "Name": "sls-veganInspector-dev-UpdateReportCommentLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-veganInspector-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "plugins": [
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "createUser": {
        "handler": "handler.createUser",
        "events": [
          {
            "http": {
              "path": "user",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "veganInspector-dev-createUser",
        "package": {},
        "memory": 128,
        "timeout": 10,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "CreateUserLambdaVersionZAZdTvhYtw5NV8lchONz4sOAt6RTWAaH9uQtPyanB0"
      },
      "getOneUser": {
        "handler": "handler.getOneUser",
        "events": [
          {
            "http": {
              "path": "user/{id}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "veganInspector-dev-getOneUser",
        "package": {},
        "memory": 128,
        "timeout": 10,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "GetOneUserLambdaVersionbjYsqzLZovFKn1YsEhGSWsbCTwfGVcxMr3verhnjuo"
      },
      "getAllUser": {
        "handler": "handler.getAllUser",
        "events": [
          {
            "http": {
              "path": "user",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "veganInspector-dev-getAllUser",
        "package": {},
        "memory": 128,
        "timeout": 10,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "GetAllUserLambdaVersioncT1VYiOhVm8XtA9uCWuODblzALrYMmqGNvNnwpBYxY4"
      },
      "updateUser": {
        "handler": "handler.updateUser",
        "events": [
          {
            "http": {
              "path": "user/{id}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "veganInspector-dev-updateUser",
        "package": {},
        "memory": 128,
        "timeout": 10,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "UpdateUserLambdaVersionfzH6kDwzfmWLatDP8KHn77KXdS4FYJVqH9KrcNSocMU"
      },
      "deleteUser": {
        "handler": "handler.deleteUser",
        "events": [
          {
            "http": {
              "path": "user/{id}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "veganInspector-dev-deleteUser",
        "package": {},
        "memory": 128,
        "timeout": 10,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "DeleteUserLambdaVersionwdxTWRU47QixlRNwcs5NkHn2PUBXfhyNGPaBEzaQ"
      },
      "createProduct": {
        "handler": "handler.createProduct",
        "events": [
          {
            "http": {
              "path": "product",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "veganInspector-dev-createProduct",
        "package": {},
        "memory": 128,
        "timeout": 10,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "CreateProductLambdaVersionzZe0Ae56DzM3z5dfMFZXR4FXbxWrqpGzhE3FioIhI"
      },
      "getOneProduct": {
        "handler": "handler.getOneProduct",
        "events": [
          {
            "http": {
              "path": "product/{id}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "veganInspector-dev-getOneProduct",
        "package": {},
        "memory": 128,
        "timeout": 10,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "GetOneProductLambdaVersion1LJlvF7pFdwoOwazXqbA424xyd4Y3kPz1hDp9KsxwZ4"
      },
      "getAllProduct": {
        "handler": "handler.getAllProduct",
        "events": [
          {
            "http": {
              "path": "product",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "veganInspector-dev-getAllProduct",
        "package": {},
        "memory": 128,
        "timeout": 10,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "GetAllProductLambdaVersion6a0whl9P6sCgcLdQFvX1jpdSj05pKYqJkyUA9b1vo4"
      },
      "updateProduct": {
        "handler": "handler.updateProduct",
        "events": [
          {
            "http": {
              "path": "product/{id}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "veganInspector-dev-updateProduct",
        "package": {},
        "memory": 128,
        "timeout": 10,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "UpdateProductLambdaVersioniNMQFkaDRkKsZflkrvcTDfMLlZS2qsh6ZNW9xQ"
      },
      "deleteProduct": {
        "handler": "handler.deleteProduct",
        "events": [
          {
            "http": {
              "path": "product/{id}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "veganInspector-dev-deleteProduct",
        "package": {},
        "memory": 128,
        "timeout": 10,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "DeleteProductLambdaVersionpQl7yLQ6qFtWNyi5YyflsPI5mEyumMreep11aBnEw"
      },
      "createReportProduct": {
        "handler": "handler.createReportProduct",
        "events": [
          {
            "http": {
              "path": "reportProduct/{id}",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "veganInspector-dev-createReportProduct",
        "package": {},
        "memory": 128,
        "timeout": 10,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "CreateReportProductLambdaVersionQVr2aagOjXQX7u66IoXnxWTfIlNFjCGqNQtFrEVP5Q"
      },
      "deleteReportProduct": {
        "handler": "handler.deleteReportProduct",
        "events": [
          {
            "http": {
              "path": "reportProduct/{id}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "veganInspector-dev-deleteReportProduct",
        "package": {},
        "memory": 128,
        "timeout": 10,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "DeleteReportProductLambdaVersionkzwuQOlnAftU48PrSU9prpZNoR9UuxB32bApSIK4Gtc"
      },
      "updateReportProduct": {
        "handler": "handler.updateReportProduct",
        "events": [
          {
            "http": {
              "path": "reportProduct/{id}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "veganInspector-dev-updateReportProduct",
        "package": {},
        "memory": 128,
        "timeout": 10,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "UpdateReportProductLambdaVersionQizWcyLDiveeYhT06UCPIR3ZxSk0WoykNI4zRIwvtrk"
      },
      "createIngredient": {
        "handler": "handler.createIngredient",
        "events": [
          {
            "http": {
              "path": "ingredient",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "veganInspector-dev-createIngredient",
        "package": {},
        "memory": 128,
        "timeout": 10,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "CreateIngredientLambdaVersionwOkP3Jpqf5BtwUVsQe3lhT8g6ocDkrMVd9PHEZrkZdU"
      },
      "getOneIngredient": {
        "handler": "handler.getOneIngredient",
        "events": [
          {
            "http": {
              "path": "ingredient/{id}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "veganInspector-dev-getOneIngredient",
        "package": {},
        "memory": 128,
        "timeout": 10,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "GetOneIngredientLambdaVersiongOSD7RTbOaAZNdXOHV2XVtDKvnZWPksBA0FNmNGcwk"
      },
      "getAllIngredient": {
        "handler": "handler.getAllIngredient",
        "events": [
          {
            "http": {
              "path": "ingredient",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "veganInspector-dev-getAllIngredient",
        "package": {},
        "memory": 128,
        "timeout": 10,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "GetAllIngredientLambdaVersion1fxJxISSNbyPkhp6mkuXeLjbaHR7gu2BTkxaVCtkPU"
      },
      "updateIngredient": {
        "handler": "handler.updateIngredient",
        "events": [
          {
            "http": {
              "path": "ingredient/{id}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "veganInspector-dev-updateIngredient",
        "package": {},
        "memory": 128,
        "timeout": 10,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "UpdateIngredientLambdaVersionDAjkqrU5moSMwhGYBOdz0jEELvffEPIzMjkQcpQ5PY"
      },
      "deleteIngredient": {
        "handler": "handler.deleteIngredient",
        "events": [
          {
            "http": {
              "path": "ingredient/{id}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "veganInspector-dev-deleteIngredient",
        "package": {},
        "memory": 128,
        "timeout": 10,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "DeleteIngredientLambdaVersionDDrGPuMyBf9yRpXbZRRRcfXyJpGvr92HFBKjCbK9l8"
      },
      "createComment": {
        "handler": "handler.createComment",
        "events": [
          {
            "http": {
              "path": "comment",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "veganInspector-dev-createComment",
        "package": {},
        "memory": 128,
        "timeout": 10,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "CreateCommentLambdaVersiongipLLfDfJV4hzMMvBn4ol5jyZCWIuaHjcknGSu0sao"
      },
      "getOneComment": {
        "handler": "handler.getOneComment",
        "events": [
          {
            "http": {
              "path": "comment/{id}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "veganInspector-dev-getOneComment",
        "package": {},
        "memory": 128,
        "timeout": 10,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "GetOneCommentLambdaVersionROoIGHfHZQ8fRRjHl7WSRSe5s644ms32fp0qdWIR08"
      },
      "getAllComment": {
        "handler": "handler.getAllComment",
        "events": [
          {
            "http": {
              "path": "comment",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "veganInspector-dev-getAllComment",
        "package": {},
        "memory": 128,
        "timeout": 10,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "GetAllCommentLambdaVersion6M8xIorEhh6ea5GUpdxZrpQNI207eVHrqdeUmGW8JQ"
      },
      "updateComment": {
        "handler": "handler.updateComment",
        "events": [
          {
            "http": {
              "path": "comment/{id}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "veganInspector-dev-updateComment",
        "package": {},
        "memory": 128,
        "timeout": 10,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "UpdateCommentLambdaVersionVwaZv5Szz2sE8avDTDd6PrVFH9CoXFvMJLisDrdtiQ"
      },
      "deleteComment": {
        "handler": "handler.deleteComment",
        "events": [
          {
            "http": {
              "path": "comment/{id}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "veganInspector-dev-deleteComment",
        "package": {},
        "memory": 128,
        "timeout": 10,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "DeleteCommentLambdaVersion7nhP4biXTJUEPkpontBn4oPyyKWVv63O2tQSSlfCjPI"
      },
      "increaseComment": {
        "handler": "handler.increaseComment",
        "events": [
          {
            "http": {
              "path": "increaseComment/{id}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "veganInspector-dev-increaseComment",
        "package": {},
        "memory": 128,
        "timeout": 10,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "IncreaseCommentLambdaVersionDttBX5WEAgttG9EUP9m0vsFAzUVemBrm155Tc3guw"
      },
      "decreaseComment": {
        "handler": "handler.decreaseComment",
        "events": [
          {
            "http": {
              "path": "decreaseComment/{id}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "veganInspector-dev-decreaseComment",
        "package": {},
        "memory": 128,
        "timeout": 10,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "DecreaseCommentLambdaVersiondhC3dBKWlXdTy0fVRMLS2BzggtqMFlhvfTwn3nIV1hI"
      },
      "createReportComment": {
        "handler": "handler.createReportComment",
        "events": [
          {
            "http": {
              "path": "reportComment/{id}",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "veganInspector-dev-createReportComment",
        "package": {},
        "memory": 128,
        "timeout": 10,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "CreateReportCommentLambdaVersion9IGADDRX79SaQQSpB9FtIMekjfbVsZYQjFyfJyYLpU"
      },
      "deleteReportComment": {
        "handler": "handler.deleteReportComment",
        "events": [
          {
            "http": {
              "path": "reportComment/{id}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "veganInspector-dev-deleteReportComment",
        "package": {},
        "memory": 128,
        "timeout": 10,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "DeleteReportCommentLambdaVersionp93JCoSzIWLBfqeok4wg0v7zQ1bTt8ghvqihThcnc"
      },
      "updateReportComment": {
        "handler": "handler.updateReportComment",
        "events": [
          {
            "http": {
              "path": "reportComment/{id}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "veganInspector-dev-updateReportComment",
        "package": {},
        "memory": 128,
        "timeout": 10,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "UpdateReportCommentLambdaVersionWzajcMowo3Gz8CeS09kJpPUTc8hceqP79V7RHOWM"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "org": "unknownchimpanzee",
      "console": true,
      "service": "veganInspector",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      }
    },
    "org": "unknownchimpanzee",
    "layers": {},
    "isDashboardMonitoringPreconfigured": true,
    "isDashboardAppPreconfigured": false,
    "artifact": "/Users/leandrobrizuela/documentdb/serverless-nodejs-app/.serverless/veganInspector.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/veganInspector/dev/1665181927671-2022-10-07T22:32:07.671Z",
    "artifact": "veganInspector.zip"
  },
  "console": {
    "schemaVersion": "2",
    "otelIngestionToken": "920f23a1-982a-41d4-8c90-256064c7b14c",
    "layerVersion": "0.5.2",
    "service": "veganInspector",
    "stage": "dev",
    "region": "us-east-1",
    "orgId": "ed80830f-8021-40c8-8d68-3f3ff7dd1a4c"
  }
}